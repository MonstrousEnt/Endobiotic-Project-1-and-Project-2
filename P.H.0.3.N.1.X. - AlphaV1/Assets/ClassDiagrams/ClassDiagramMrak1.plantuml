@startuml Test
title Endobiotic UML Class Digram - Mark 1\n<color:Gray>Monstrous | Endobiotic | 04/1/2023</color>

package Scripts <<Folder>> 
{
    package Animations <<Folder>> 
    {
        abstract Class BaseControllerAnimations 
        {
            <b>Animations Status - Idle
            #m_IDLE_DOWN: string
            #m_IDLE_UP: string
            #m_IDLE_LEFT: string
            #m_IDLE_RIGHT: string
            
            <b>Animations Status - Walk
            #m_WALK_DOWN: string
            #m_WALK_UP: string
            #m_WALK_LEFT: string
            #m_WALK_RIGHT: string
            
            <b>Components
            #m_animator: Animator
           
            <b>Animations
            #m_currentAnimation: string
            #m_LastMoveDir: MoveDirection
            #m_turnThresholdMoveY: float

            ===
            <b>Getters and Setters
            +Animator: Animator 

            ===
            <b>Mini Animation Manager
            #ChangeAnimationState(string a_newAnimation): void
            ===
            <b>Animations Methods
            +CallMovementAnimation(Vector2 a_movement): void
            -idleAnimation(): void
            -moveAnimations(Vector2 a_movement): void
        }
    } 
    package Character <<Folder>> 
    {
        CharacterDeathController <|-- BaseControllerAnimations
        PlayerControllerAnimations <|-- BaseControllerAnimations
        
        class CharacterDeathController 
        {
            <b>Player Death animation
            -m_DEATH

            ====
            <b>Unity Methods
            +Start: void
            
            ====
            <b>Death Animations
            +Die: void

        }

        class CharacterFormsController 
        {
            <b>Player Forms (Game Objects)
            -m_formObjects: List<GameObject>

            ===
            <b>Components
            +m_controllerAnimations: BaseControllerAnimations

            ===
            Player Current form
            -m_currform: Form

            ===
            <b>Getters annd Setters
            +currForm: Form

            ===
            <b>Unity Methods
            -Awake(): void

            ===
            <b>Character Form Methods
            +ChangeForm(Form a_newForm): void
            -Init: void

        }

        class CharacterInteractionController 
        {
            <b>Prefabs
            -m_deathPrefab: GameObject

            ===
            <b>Special Effects
            -m_riseAgainParticles: ParticleSystem

            ===
            <b>Sounds
            -m_soundEffectUnityEvent: UnityEvent

            ====
            <b>Invulnerable Timer - Serialize Fields
            -m_invulnerableTimeSF: float

            ===
            <b>Tags Scripbale Object
            -m_tagDataEnemy: TagDataScriptableObject
            -m_tagDataInteractable: TagDataScriptableObject

            ===
            <b>Boolean Flag Scriptable Object - Player Manager
            -m_booleanFlagGlobalVariablePlayerCanMove: BooleanFlagGlobalVariableScriptableObject

            ===
            <b>Components
            -m_characterFormsController: CharacterFormsController
            -m_characterItemHolder: CharacterItemHolder

            ===
            <b>Current Intractable
            -m_currentlyInteractable: List<Interactable> 

            ===
            Invulnerable Timer - Non-Serialize Fields
            -m_invulnerableTimer:float

            ===
            <b>Unity Methods
            -Awake(): void
            -Start(): void
            -OnCollisionEnter2D(Collision2D a_collision2D): void
            -OnTriggerEnter2D(Collider2D a_collider2D): void
            -OnTriggerExit2D(Collider2D a_collider2D): void

            ===
            <b>Character Interaction Methods
            +Interact(): void
            -addIntractable(Collider2D a_collider2D): void
            -removeIntractable(Collider2D a_collider2D): void
            -respawnCrab(): void
            -respawnAsNewForm(Form a_newForm, Vector3 a_position): void
            -respawnCharacter(Collision2D a_collision2D): void
            -waitWhileDead(float a_duration): void
        }

        class CharacterItemHolder
        {
            <b>Sprite
            -m_itemSpriteRenderer: SpriteRenderer

            ===
            <b>Intractable
            -m_currentPickupObject: EffectPickupItem

            ===
            <b>Unity Methods
            Start(): void

            ===
            <b>Item Holder Methods
            +AddItem(EffectPickupItem a_pickupItem, Sprite a_itemSprite): void
            +DropItem(): void
            +UseItem(): void
        }

        class DestroyerFormAttack 
        {
            <b>Components
            -m_playerControllerAnimations: PlayerControllerAnimations

            ===
            <b>Unity Methods
            -Update():void

        }

        class PlayerController 
        {
            <b>Components (Reference by Unity)
            -m_playerAnimation: PlayerControllerAnimations

            ===
            <b>Global Scriptable Object Variable
            -m_booleanFlagGlobalVariablePlayerCanMove: BooleanFlagGlobalVariableScriptableObject

            ===
            <b>Move
            -m_moveSpeed: float
            -m_movement: Vector2

            ===
            <b>Components (Initializes in Awake)
            -m_rigidBody2D: Rigidbody2D
            -m_characterInteractionController: CharacterInteractionController

            ===
            <b>Unity Methods
            -Awake(): void
            -Update(): void
            -FixedUpdate(): void

            ===
            <b>Player Controller Methods
            -inputs(): void
            -move(): void
            -interact(): void
        }

        class PlayerControllerAnimations
        {
            <b>Animation States - Destroyer
            -m_DEST_ATK_DOWN: string
            -m_DEST_ATK_UP: string
            -m_DEST_ATK_LEFT: string
            -m_DEST_ATK_RIGHT: string

            ===
            <b>Animation States - Magnetic
            -m_MAGNET_PULL_DOWN: string
            -m_MAGNET_PULL_UP: string
            -m_MAGNET_PULL_LEFT: string
            -m_MAGNET_PULL_RIGHT: string

            ===
            <b>Delay or Timer
            -m_requiredTime: float

            ===
            <b>Base Controller Animations Override Methods - Player Controller Animations
            #ChangeAnimationState(string newAnimation): void

            ===
            <b>Unity Methods
            -Start(): void

            ===
            <b>Animation Methods
            +DestroyerAttack(): void
            +void MagnetPull(): void
        }

        class PlayerControllerUI 
        {
            <b>Boolean Flag Global Variable Scriptable Object - UI Manager
            -m_booleanFlagGlobalVariableUIManagerPauseMenuIsActive: BooleanFlagGlobalVariableScriptableObject
            
            ===
            <b>Unity Events
            -m_enablePauseMneuUnityEevnt: UnityEvent
            -m_disablePauseMneuUnityEevnt: UnityEvent

            ===
            <b>Unity Methods
            +Update(): void
        }

    }
}

@enduml