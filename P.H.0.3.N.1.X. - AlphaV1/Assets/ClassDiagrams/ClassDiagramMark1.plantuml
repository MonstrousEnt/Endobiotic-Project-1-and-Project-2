@startuml Class Diagram Mark 1
title Endobiotic UML Class Digram - Mark 1\n<color:Gray>Monstrous | Endobiotic | 04/2/2023</color>

package Scripts <<Folder>> 
{
    package Animations <<Folder>> 
    {
        abstract Class BaseControllerAnimations 
        {
            <b>Animations Status - Idle
            #m_IDLE_DOWN: string
            #m_IDLE_UP: string
            #m_IDLE_LEFT: string
            #m_IDLE_RIGHT: string
            
            <b>Animations Status - Walk
            #m_WALK_DOWN: string
            #m_WALK_UP: string
            #m_WALK_LEFT: string
            #m_WALK_RIGHT: string
            
            <b>Components
            #m_animator: Animator
           
            <b>Animations
            #m_currentAnimation: string
            #m_LastMoveDir: MoveDirection
            #m_turnThresholdMoveY: float

            ===
            <b>Getters and Setters
            +Animator: Animator 

            ===
            <b>Mini Animation Manager
            #ChangeAnimationState(string a_newAnimation): void
            ===
            <b>Animations Methods
            +CallMovementAnimation(Vector2 a_movement): void
            -idleAnimation(): void
            -moveAnimations(Vector2 a_movement): void
        }
    } 

    package Character <<Folder>> 
    {
        CharacterDeathController <|-- BaseControllerAnimations
        PlayerControllerAnimations <|-- BaseControllerAnimations

        class CharacterDeathController 
        {
            <b>Player Death animation
            -m_DEATH

            ====
            <b>Unity Methods
            +Start: void
            
            ====
            <b>Death Animations
            +Die: void

        }

        class CharacterFormsController 
        {
            <b>Player Forms (Game Objects)
            -m_formObjects: List<GameObject>

            ===
            <b>Components
            +m_controllerAnimations: BaseControllerAnimations

            ===
            Player Current form
            -m_currform: Form

            ===
            <b>Getters annd Setters
            +currForm: Form

            ===
            <b>Unity Methods
            -Awake(): void

            ===
            <b>Character Form Methods
            +ChangeForm(Form a_newForm): void
            -Init: void

        }

        class CharacterInteractionController 
        {
            <b>Prefabs
            -m_deathPrefab: GameObject

            ===
            <b>Special Effects
            -m_riseAgainParticles: ParticleSystem

            ===
            <b>Sounds
            -m_soundEffectUnityEvent: UnityEvent

            ====
            <b>Invulnerable Timer - Serialize Fields
            -m_invulnerableTimeSF: float

            ===
            <b>Tags Scriptable Object
            -m_tagDataEnemy: TagDataScriptableObject
            -m_tagDataInteractable: TagDataScriptableObject

            ===
            <b>Boolean Flag Scriptable Object - Player Manager
            -m_booleanFlagGlobalVariablePlayerCanMove: BooleanFlagGlobalVariableScriptableObject

            ===
            <b>Components
            -m_characterFormsController: CharacterFormsController
            -m_characterItemHolder: CharacterItemHolder

            ===
            <b>Current Intractable
            -m_currentlyInteractable: List<Interactable> 

            ===
            Invulnerable Timer - Non-Serialize Fields
            -m_invulnerableTimer:float

            ===
            <b>Unity Methods
            -Awake(): void
            -Start(): void
            -OnCollisionEnter2D(Collision2D a_collision2D): void
            -OnTriggerEnter2D(Collider2D a_collider2D): void
            -OnTriggerExit2D(Collider2D a_collider2D): void

            ===
            <b>Character Interaction Methods
            +Interact(): void
            -addIntractable(Collider2D a_collider2D): void
            -removeIntractable(Collider2D a_collider2D): void
            -respawnCrab(): void
            -respawnAsNewForm(Form a_newForm, Vector3 a_position): void
            -respawnCharacter(Collision2D a_collision2D): void
            -waitWhileDead(float a_duration): void
        }

        class CharacterItemHolder
        {
            <b>Sprite
            -m_itemSpriteRenderer: SpriteRenderer

            ===
            <b>Intractable
            -m_currentPickupObject: EffectPickupItem

            ===
            <b>Unity Methods
            Start(): void

            ===
            <b>Item Holder Methods
            +AddItem(EffectPickupItem a_pickupItem, Sprite a_itemSprite): void
            +DropItem(): void
            +UseItem(): void
        }

        class DestroyerFormAttack 
        {
            <b>Components
            -m_playerControllerAnimations: PlayerControllerAnimations

            ===
            <b>Unity Methods
            -Update():void

        }

        class PlayerController 
        {
            <b>Components (Reference by Unity)
            -m_playerAnimation: PlayerControllerAnimations

            ===
            <b>Global Scriptable Object Variable
            -m_booleanFlagGlobalVariablePlayerCanMove: BooleanFlagGlobalVariableScriptableObject

            ===
            <b>Move
            -m_moveSpeed: float
            -m_movement: Vector2

            ===
            <b>Components (Initializes in Awake)
            -m_rigidBody2D: Rigidbody2D
            -m_characterInteractionController: CharacterInteractionController

            ===
            <b>Unity Methods
            -Awake(): void
            -Update(): void
            -FixedUpdate(): void

            ===
            <b>Player Controller Methods
            -inputs(): void
            -move(): void
            -interact(): void
        }

        class PlayerControllerAnimations
        {
            <b>Animation States - Destroyer
            -m_DEST_ATK_DOWN: string
            -m_DEST_ATK_UP: string
            -m_DEST_ATK_LEFT: string
            -m_DEST_ATK_RIGHT: string

            ===
            <b>Animation States - Magnetic
            -m_MAGNET_PULL_DOWN: string
            -m_MAGNET_PULL_UP: string
            -m_MAGNET_PULL_LEFT: string
            -m_MAGNET_PULL_RIGHT: string

            ===
            <b>Delay or Timer
            -m_requiredTime: float

            ===
            <b>Base Controller Animations Override Methods - Player Controller Animations
            #ChangeAnimationState(string newAnimation): void

            ===
            <b>Unity Methods
            -Start(): void

            ===
            <b>Animation Methods
            +DestroyerAttack(): void
            +void MagnetPull(): void
        }

        class PlayerControllerUI 
        {
            <b>Boolean Flag Global Variable Scriptable Object - UI Manager
            -m_booleanFlagGlobalVariableUIManagerPauseMenuIsActive: BooleanFlagGlobalVariableScriptableObject
            
            ===
            <b>Unity Events
            -m_enablePauseMneuUnityEevnt: UnityEvent
            -m_disablePauseMneuUnityEevnt: UnityEvent

            ===
            <b>Unity Methods
            +Update(): void
        }

    }

    package Cutscenes <<Folder>> 
    {
        class RebirthCutscene 
        {
            <b>Special Effect
            -m_rebirthParticles: ParticleSystem

            ===
            <b>Boolean Flag Scriptable Object - Player Manager
            -m_booleanFlagGlobalVariablePlayerCanMove: BooleanFlagGlobalVariableScriptableObject

            ===
            <b>Unity Methods
            -Start(): void

            ===
            Cutscene Methods
            -playRebirthCutscene(): IEnumerator
        }
    }

    package Enemy <<Folder>> 
    {
         EnemyControllerAnimations <|-- BaseControllerAnimations

        class EnemyController 
        {
            <b>Form
            -m_intialForm: Form

            ===
            <b>AI
            -m_moveSpeed: float
            -m_aggroRadius: float

            ===
            <b>Tag Scriptable Object
            -m_tagDataPlayer: TagDataScriptableObject

            ===
            <b>Attack
            -m_isAttacking: bool 

            ===
            <b>Target
            -m_target: Transform
            -m_characterFormController: CharacterFormsController

            ===
            <b>Movement
            -m_rigidbody2D: Rigidbody2D
            -m_preferredPosition:

            ===
            <b>Getters and Setters
            +form: Form
            setBehaviour(GameObject a_target): void

            ===
            <b>Find Methods
            FFindTargetsInRange(float a_range): void

            ===
            <b>Unity Methods
            -Awake(): void
            -Start(): void
            -Update(): void

            ===
            <b>AI Methods
            +UpdatePreferredPosition(Vector3 a_position): void
            -move(): void
            -intelligence(float a_range, float a_updateSpeed): void
        }

        class EnemyControllerAnimations 
        {
            <b>Movements
            -m_previousPosition: Vector3

            ===
            <b>Unity Methods
            -Start(): void
            -Update(): void

            ===
            <b>Animations Methods
            -movementDetection(): void
        }

        class EnemyInteraction 
        {
            <b>Components
            -m_enemyControllerAnimations: EnemyControllerAnimations
            -m_characterFormsController: CharacterFormsController

            ===
            <b>Unity Events
            -m_deathEvent: UnityEvent<GameObject>

            ===
            <b>Getters and Setters
            +deathEvent: UnityEvent<GameObject>

            ===
            <b>Unity Methods
            -Awake(): void

            ===
            <b>AI Interaction Methods
            +KillEnemy(): void
            +DestroyEnemy(): void
        }

       class EnemySpawner 
       {
            <b>Form Prefab
            -m_manipulatorPrefab: GameObject
            -m_transportPrefab: GameObject
            -m_magneticPrefab: GameObject
            -m_electricPrefab: GameObject
            -m_destroyerPrefab: GameObject
            -m_batteryPrefab: GameObject
            -m_crabPrefab: GameObject

            ===
            <b>Spawner Data
            -m_spawnInterval: float
            -m_spawnDistanceX: float
            -m_spawnDistanceY: float

            ===
            <b>Robots List
            -m_userSpawnedRobots: List<GameObject>

            ===
            <b>Sound Unity Event
            -m_soundEffectUnityEvent: UnityEvent

            ===
            <b>Prefabs
            -m_enemyFormList: List<GameObject>

            ===
            <b>Robots List Dictionary
            -m_trackedRobots: Dictionary<GameObject, robot>

            ===
            <b>Unity Methods
            -Start(): void

            ===
            AI Methods
            +UpdateCurrentRobotsList(GameObject caller): void
            -initialize(): void
            -loadRobotList(): void
            -spawnRobot(): void
            -loadUserSpawnedRobots(): void
       }
    }

    package Enums <<Folder>>
    {
        package CharacterEnums <<Folder>>
        {
            enum Form 
            {
                +Manipulator
                +Transport
                +Magnetic
                +Electronic
                +Destroyer
                +Battery
                +Crab
            }
        }
        
        package GameManagerEnums <<Folder>> 
        {
            package TimerManagerEnums <<Folder>> 
            {
                enum TimerMode
                {
                    +CountUp
                    +CountDown
                }
            }
        }

        package InteractableEnums <<Folder>>
        {
            enum InteractableOjbects 
            {
                +Pit
            }
        }

        package MovementEnums <<Folder>>
        {
            enum MoveDirection 
            {
                +Down
                +Up
                +Left
                +Right
            }
        }
    }

    package GameManager <<Folder>>
    {
        class AudioGameManager 
        {
            <b>Audio List
            -m_audioListSoundEffects: AudioListScriptableObject
            -m_audioListSoundtracks: AudioListScriptableObject

            ===
            <b>Game Objects
            -m_soundEffectsGameObject: GameObject
            -m_soundtrackGameObject: GameObject

            ===
            <b>Getters and Setters
            -setAudioScource(AudioDataScriptableObject a_audioData): void

            ===
            <b>Initialize Methods
            -intializeGameObject(AudioDataScriptableObject a_audioData, GameObject a_parentGameObject): void
            -intializeGameObjects(AudioListScriptableObject a_audioList, GameObject a_parentGameObject): void

            ===
            <b>Audio Game Events
            +PlaySound(AudioDataScriptableObject a_audioData): void
            +PlayRandomSound(AudioListScriptableObject a_audioList): void
            +StopSound(AudioDataScriptableObject a_audioData): void
            +DisableLoop(AudioDataScriptableObject a_audioData): void
            +EnableLoop(AudioDataScriptableObject a_audioData): void

            ===
            <b>Unity Methods
            -Awake(): void
        }

        class LevelLoaderAsyncGameManager 
        {
            <b>Async Operation
            -scenesLoading: List<AsyncOperation>

            ===
            <b>Level Loader Game Events
            +LoadNextScene(LevelDataScriptableObject levelData): void

            ===
            <b>Level Load Methods
            -getScenceLoadProgress(): IEnumerator
        }

        class LevelResetGameManager 
        {
            <b>Data Containers - Scriptable Object
            -m_pointList: PointList
            -m_timerData: TimerDataScriptableObject

            ===
            <b>Level Reset Game Events
            +RestartLevel(): void
        }

        class SettingsGameManager 
        {
            <b>Pause Data
            -m_gameIsPause: bool

            ===
            <b>FPS Data
            -m_lockFps: int
            -m_fps: int

            ===
            <b>Getters and Setters
            -setFPS(int a_fps): void
            -disableVsync(): void

            ===
            <b>Settings Game Events
            +EnablePause(): void
            +DisablePause(): void

            ===
            <b>Unity Methods
            -Start(): void
        }

        class StartLevelGameManager
        {
            <b>Unity Event
            -m_startTimerUnityEvent: UnityEvent
            -m_soundEffectUnityEvent: UnityEvent

            ===
            <b>Unity Methods
            -Start(): void

            ===
            <b>Start Level Methods
            -startLevel(): void
        }

        class TimerManager 
        {
            <b>Time Data
            -m_timerData: TimerDataScriptableObject

            ===
            <b>Timer Game Events
            +SetUpTimer(TimerDataScriptableObject a_timerData): void
            +EnableTime(TimerDataScriptableObject a_timerData): void

            ===
            Timer Mode Methods
            -UpdateTimer(TimerDataScriptableObject a_timerData): void
            -countUpTimer(TimerDataScriptableObject a_timerData): void
            -countDownTimer(TimerDataScriptableObject a_timerData): void

            ===
            <b>Unity Methods
            -Update(): void
        }
    }

    package Interfaces <<Folder>>
    {
        package InteractableInterfaces <<Folder>>
        {
            interface IPrerequisite 
            {
                <b>Interface Methods
                +IsComplete(): void
                ---
            }
        }
    }

    package Interactables <<Folder>> 
    {
        Interactable <|-- IPrerequisite

        class EffectAudioManagerGameEvent
        {
            <b>Audio Data
            -m_audioData: AudioDataScriptableObject
            -m_audioList: AudioListScriptableObject

            ===
            <b>Game Event Scriptable Objects - Audio Manager
            -m_audioManagerGameEventPlaySound: AudioDataGameEventScriptableObject
            -m_audioManagerGameEventPlayRandomSound: AudioDataGameEventScriptableObject
            -m_audioManagerGameEventStopSound: AudioDataGameEventScriptableObject
            -m_audioManagerGameEventEnableLoop: AudioDataGameEventScriptableObject
            -m_audioManagerGameEventDisableLoop: AudioDataGameEventScriptableObject

            ===
            <b>Call Audio Manager Game Events
            +PlaySound(): void
            +PlayRandomSound(): void
            +StopSound(): void
            +EnableLoop(): void
            +DisableLoop(): void
        }

        class EffectChangeSprite 
        {
            <b>Sprites
            -m_defaultState: Sprite
            -m_newState: Sprite

            ===
            <b>Components
            -m_spriteRenderer: SpriteRenderer

            ===
            <b>Unity Methods
            -Awake(): void
            -Start(): void

            ====
            <b>Sprite Changes Methods
            +ChangeSprite(): void
        }

        class EffectDisableCollider 
        {
            <b>Delay
            -m_delay: float

            ===
            <b>Collier 2D
            -m_collider: Collider2D

            ===
            <b>Disable Collier Methods
            +DisableCollider(): void
            -disableColliderAfterDelay(): void
        }

        class EffectDisableObject 
        {
            <b>Disable Game Object Methods
            +DisableObject(): void
        }

        class EffectPickupItem 
        {
            <b>Tag Scriptable Object
            -m_tagDataPlayer: TagDataScriptableObject

            ===
            <b>Components
            -m_spriteRenderer: SpriteRenderer
            -m_interactable: Interactable
            -m_characterItemHolder: CharacterItemHolder

            ===
            <b>Unity Methods
            -Awake(): void

            ===
            <b>Items Methods
            +PickupItem(): void
            +ReturnItem(): void
        }

        class EffectPlayAnimation 
        {
            <b>Animation States
            -m_animationName: string

            ===
            <b>Animation Methods
            +PlayAnimation(): void
        }

        class EffectSpawnObject
        {
            <b>Components
            -m_objectPrefab: GameObject
            -m_locationOffset: Vector3

            ===
            <b>Spawn Object Methods
            +SpawnObject(): void
        }

        class EffectUseItem 
        {
            <b>Tag Scriptabe Object
            -m_tagDataPlayer: TagDataScriptableObject

            ===
            <b>Item Methods
            +UseItem(): void
        }
        
        class Interactable 
        {
            <b>Required Form
            -m_requiredForm: Form

            ===
            <b>Unity Events
            -m_onActivated: UnityEvent

            ===
            <b>Lists
            -m_prerequisites: List<Interactable>

            ===
            <b>Intractable
            -m_isInteractable: bool
            -m_hasInteracted: bool
            -m_interactableSpriteController: InteractableSpriteController

            ===
            <b>Getters and Setters
            +SetPrerequisiteComplete(): void
            -checkSetActive(): void

            ===
            <b>Interface Methods
            +IsComplete(): void 

            ===
            <b>Unity Methods
            -Awake(): void
            -Start(): void


            ===
            <b>Intractable Methods
            +Interact(Form a_currForm): void
            +Reenable(): void
            +updateSprite(): void
            +checkIfPrerequisitesMet(): void
            +subscribeToPrerequisites(): void
        }

        class InteractableSpriteController
        {
            <b>Intractable Boolean Flag for Sprite
            -m_useInteractableSpriteController: bool

            ===
            <b>Intractable Sprite
            -m_nonInteractableSprite: Sprite
            -m_isInteractableSprite: Sprite
            -m_hasInteractedSprite: Sprite

            ===
            <b>Components
            -m_spriteRenderer: SpriteRenderer

            ===
            <b>Unity Methods
            -Awake(): void
            -Start(): void

            ===
            <b>Sprite Methods
            +ChangeSprite(bool a_isActive, bool a_hasActivated): void

            ===
            Animation Methods
            -disableAnimatorIfNeeded(): void
        }

        class UITryAgainMenuOpenTrigger 
        {
            <b>Unity Events
            -m_enbaleTryAgainMenuUjnityEvent: UnityEvent

            ===
            <b>Unity Methods
            -OnTriggerEnter2D(Collider2D a_collision): void
        }
    }

    package PhysicsInteractions <<Folder>>
    {
        class PushableObject
        {
            <b>Form
            -m_requiredForm: Form
            
            ===
            <b>Intractable
            -m_objectType: InteractableOjbects 

            ===
            <b>Pit Trap Data
            -m_destroyOnceUsed: bool

            ===
            <b>Unity Events
            -m_soundEffectUnityEvent: UnityEvent

            ===
            <b>Unity Methods
            -Awake(): void
            -OnCollisionEnter2D(Collision2D a_collision): void
        }

        class TrapObject 
        {
            <b>Intractable
            -m_objectType: InteractableOjbects

            ===
            <b>Sprite
            -m_hasActivatedSprite: Sprite

            ===
            <b>Unity Events
            -m_addPointUnityEvent: UnityEvent

            ===
            <b>Sprite - Non-Serialize Field
            -m_spriteRenderer: SpriteRenderer

            ===
            <b>Trap
            m_trapCollider: Collider2D

            ===
            <b>Unity Methods 
            -Awake(): void

            ===
            <b>Intractable Methods
            +Interact(): void
            +GetObjectType(): InteractableOjbects
        }
    }

    package ScriptableObject <<Folder>> 
    {
        package DataContainers <<Folder>> 
        {
            class AudioDataScriptableObject 
            {
                <b>Class Variable
                -m_clip: AudioClip
                -m_audioGameObjectName: string
                -m_volume: float
                -m_pitch: float
                -m_loop: bold
                -m_playOnAwake: bool
                -m_source: AudioSource

                ===
                <b>Getters and Setters
                +clip: AudioClip
                +audioGameObjectName: string
                +volume: float
                +pitch: float
                +loop: bold
                +playOnAwake: bool
                +source: AudioSource

                ===
                <b>Unity Methods
                -OnEnable(): void
            }

            class LevelDataScriptableObject 
            {
                <b>Class Variables
                -m_levelID: string
                -m_levelName: string
                -m_buildIndex: int
                -m_unlockLevel: bool

                ===
                <b>Getters and Setters
                +levelID: string
                +levelName: string
                +buildIndex: int
                +unlockLevel: bool
            }

            class PopUpDataScriptableObject 
            {
                <b>Class Variables 
                -m_message: string
                -m_isConfirm: bool
                -m_isReadyToClose: bool
                -m_popUpActionUnityEvent: UnityEvent

                ===
                <b>Getters and Setters 
                +message: string
                +isConfirm: bool
                +isReadyToClose: bool
                +popUpActionUnityEvent: UnityEvent
            }

            class TimerDataScriptableObject 
            {
                <b>Class Variables
                -m_timeInSeconds: float
                -m_timerMode: TimerMode
                -m_startTimeInSeconds: float
                -m_startTimer: bool
                -m_UpdateUI: bool

                ===
                <b>Getters and Setters
                +timeInSeconds: float
                +timerMode: TimerMode
                +startTimeInSeconds: float
                +startTimer: bool
                +UpdateUI: bool

                ===
                <b>Reset Data Methods
                +Reset(): void

                ===
                <b>Unity Methods
                -OnEnable(): void
            }
        }

        package GameEvents <<Folder>> 
        {
            package Void <<Folder>> 
            {
                class VoidGameEventScriptableObject 
                {
                    <b>Class Variables
                    -m_listeners: VoidGameEventListener

                    ===
                    <b>Registration Listener
                    +RegisterListener(VoidGameEventListener listener): void
                    +UnregisterListener(VoidGameEventListener listener): void

                    ===
                    <b>Raise/Invoke Game Events
                    +Raise(): void
                }

                class VoidGameEventListener 
                {
                    <b>Game Event Scriptable Object
                    -m_gameEvent: VoidGameEventScriptableObject

                    ===
                    <b>Unity Event
                    -m_response: UnityEvent

                    ===
                    <b>Invoke Unity Events
                    +OnEventRaised(): void

                    ===
                    <b>Unity Methods
                    -OnEnable(): void
                    -nDisable(): void
                }
            }

            package GameManagerSO <<Folder>> 
            {
                package AudioManager <<Folder>> 
                {
                    package AudioData <<Folder>> 
                    {
                        class AudioDataGameEventScriptableObject 
                        {
                             <b>Class Variables
                            -m_listeners: AudioDataGameEventListener

                            ===
                            <b>Registration Listener
                            +RegisterListener(AudioDataGameEventListener listener): void
                            +UnregisterListener(AudioDataGameEventListener listener): void

                            ===
                            <b>Raise/Invoke Game Events
                            +Raise(AudioDataScriptableObject a_audioData): void
                        }

                        class AudioDataGameEventListener 
                        {
                            <b>Game Event Scriptable Object
                            -m_gameEvent: AudioDataScriptableObject

                            ===
                            <b>Unity Event
                            -m_response: UnityEvent<AudioDataScriptableObject>

                            ===
                            <b>Invoke Unity Events
                            +OnEventRaised(AudioDataScriptableObject a_audioData): void

                            ===
                            <b>Unity Methods
                            -OnEnable(): void
                            -nDisable(): void
                        }
                    }

                    package AudioList <<Folder>> 
                    {
                         class AudioListGameEventScritableObject 
                        {
                             <b>Class Variables
                            -m_listeners: AudioListGameEventListener

                            ===
                            <b>Registration Listener
                            +RegisterListener(AudioListGameEventListener listener): void
                            +UnregisterListener(AudioListGameEventListener listener): void

                            ===
                            <b>Raise/Invoke Game Events
                            +Raise(AudioListScriptableObject a_audioList): void
                        }

                        class AudioListGameEventListener 
                        {
                            <b>Game Event Scriptable Object
                            -m_gameEvent: AudioListGameEventScritableObject

                            ===
                            <b>Unity Event
                            -m_response: UnityEvent<AudioListScriptableObject>

                            ===
                            <b>Invoke Unity Events
                            +OnEventRaised(AudioListScriptableObject a_audioList): void

                            ===
                            <b>Unity Methods
                            -OnEnable(): void
                            -nDisable(): void
                        }
                    }
                }

                package LevelManager <<Folder>>
                {
                    package LevelData <<Folder>> 
                    {
                        class LevelDataGameEventScriptableObject 
                        {
                             <b>Class Variables
                            -m_listeners: LevelDataGameEventListener

                            ===
                            <b>Registration Listener
                            +RegisterListener(LevelDataGameEventListener listener): void
                            +UnregisterListener(LevelDataGameEventListener listener): void

                            ===
                            <b>Raise/Invoke Game Events
                            +Raise(LevelDataGameEventScriptableObject a_levelData): void
                        }

                        class LevelDataGameEventListener 
                        {
                            <b>Game Event Scriptable Object
                            -m_gameEvent: LevelDataGameEventListener

                            ===
                            <b>Unity Event
                            -m_response: UnityEvent<LevelDataScriptableObject>

                            ===
                            <b>Invoke Unity Events
                            +OnEventRaised(LevelDataGameEventScriptableObject a_levelData): void

                            ===
                            <b>Unity Methods
                            -OnEnable(): void
                            -nDisable(): void
                        }
                    }
                }

                package TimerManager <<Folder>> 
                {
                    package TimerData <<Folder>> 
                    {
                        class TimerDataGameEventScriptableObject 
                        {
                            <b>Class Variables
                            -m_listeners: TimerDataGameEventListener

                            ===
                            <b>Registration Listener
                            +RegisterListener(TimerDataGameEventListener listener): void
                            +UnregisterListener(TimerDataGameEventListener listener): void

                            ===
                            <b>Raise/Invoke Game Events
                            +Raise(TimerDataScriptableObject a_timerData): void
                        }

                        class TimerDataGameEventListener 
                        {
                            <b>Game Event Scriptable Object
                            -m_gameEvent: TimerDataGameEventScriptableObject

                            ===
                            <b>Unity Event
                            -m_response: UnityEvent<TimerDataScriptableObject>

                            ===
                            <b>Invoke Unity Events
                            +OnEventRaised(TimerDataScriptableObject a_timerData): void

                            ===
                            <b>Unity Methods
                            -OnEnable(): void
                            -nDisable(): void
                        }
                    }
                }

                package UIManager <<Folder>> 
                {
                    package PopUpData <<Folder>> 
                    {
                        class PopUpDataGameEventScriptableObject 
                        {
                            <b>Class Variables
                            -m_listeners: PopUpDataGameEventListener

                            ===
                            <b>Registration Listener
                            +RegisterListener(PopUpDataGameEventListener listener): void
                            +UnregisterListener(PopUpDataGameEventListener listener): void

                            ===
                            <b>Raise/Invoke Game Events
                            +Raise(PopUpDataScriptableObject a_popUpData): void
                        }

                        class PopUpDataGameEventListener 
                        {
                            <b>Game Event Scriptable Object
                            -m_gameEvent: PopUpDataGameEventScriptableObject

                            ===
                            <b>Unity Event
                            -m_response: UnityEvent<PopUpDataScriptableObject>

                            ===
                            <b>Invoke Unity Events
                            +OnEventRaised(PopUpDataScriptableObject a_popUpData): void

                            ===
                            <b>Unity Methods
                            -OnEnable(): void
                            -nDisable(): void
                        }
                    }
                }
            }
        }

        package GlobalVariables <<Folder>>
        {
            class BooleanFlagGlobalVariableScriptableObject 
            {
                <b>Class Variables
                -m_booleanFlag: bool 

                ===
                <b>Getters and Setters
                +booleanFlag: bool 
                +EnableBoolFlag(): void
                +DisableBooleanFlag(): void
            }
        }

        package ID <<Folder>> 
        {
            class GuildIDScriptableObject 
            {
                <b>Class Variables
                -m_guildID: string

                ===
                <b>Generate Methods
                +GenerateID(): void
            }
        }

        package Lists <<Folder>> 
        {
            class AudioListScriptableObject
            {
                <b>Class Variables
                -m_audioDatas: List<AudioDataScriptableObject>

                ===
                <b>Getters and Setters
                +audioDatas: List<AudioDataScriptableObject>
            }

            class LevelListScriptableObject 
            {
                <b>Class Variables
                -m_levelDatas: List<LevelDataScriptableObject>

                ===
                <b>Getters and Setters
                +levelDatas: List<LevelDataScriptableObject>
                +GetLevelById(string a_id): int
            }
        }

        package Tag <<Folder>> 
        {
            class TagDataScriptableObject 
            {
                <b>Class Variables
                -m_tagName: string

                ===
                <b>Getters and Setters
                +tagName: string
            }
        }
    } 

    package Structs <<Folder>>
    {
        package EnemyStructs <<Folder>>
        {
            struct Robot 
            {
                +Robot(Form a_form, Vector3 a_position):

                ===
                +formRobot: Form
                +positionRobot: Vector3
            }
        }
    }

    package UI <<Folder>>
    {
        abstract class UIBase 
        {
            <b>Main Window Data
            #m_mainWindowGameObject: GameObject

            ===
            <b>UI Base - UI Main Window Methods
            +EnableMainWindow(): void
            +DisableMainWindow(): void
        }

        package FadeBackground <<Folder>> 
        {
            UIFadeBackground <|-- UIBase

            class UIFadeBackground 
            {

            }
        }

        package Menus <<Folder>> 
        {
             UIMenuBase <|-- UIBase

            package PauseMenu <<Folder>>
            {
                UIPauseMenu <|-- UIMenuBase

                class UIPauseMenu 
                {
                    <b>Boolean Flag Global Variable Scriptable Object - UI Manager
                    -m_booleanFlagGlobalVariableUIManagerPauseMenuIsActive: BooleanFlagGlobalVariableScriptableObject

                    ===
                    <b>UI Base - Override Methods - Pause Menu
                    +EnableMenu(): void
                    +DisableMenu(): void

                    ===
                    <b>UI Methods
                    +ResumeGame(): void
                }
            }

            package TryAgainMenu <<Folder>> 
            {
                UITryAgainMenu <|-- UIMenuBase

                class UITryAgainMenu 
                {
                    <b>Point System
                    -m_piontSystem: UIPiontSystem

                    ===
                    <b>Unity Event
                    -m_restartLevelUnityEvent: UnityEvent
                    -m_loadNextScenceUnityEvent: UnityEvent

                    ===
                    <b>UI Base - Override Methods - Try Again Menu
                    +EnableMenu(): void

                    ===
                    <b>UI Methods
                    +TryAgin(): void
                }
                
            }

            abstract class UIMenuBase 
            {
                <b>UI Components
                #m_firstButtonGameObject: GameObject

                ===
                <b>Global Variable Scriptable Object - Player Manager
                #m_booleanFlagGlobalVariablePlayerManagerPlayerCanMove: BooleanFlagGlobalVariableScriptableObject

                ===
                <b>Game Events Scriptable Object - Settings Manager
                #m_voidGameEventSettingsManagerEnablePause: VoidGameEventScriptableObject
                #m_voidGameEventSettingsManagerDisablePause: VoidGameEventScriptableObject

                ===
                <b>Game Events Scriptable Object - UI Manager - Fade Background
                #m_voidGameEventUIManagerEnableFadeBackground: VoidGameEventScriptableObject
                #m_voidGameEventUIManagerDisableFadeBackground: VoidGameEventScriptableObject

                ===
                <b>Pop Up Data Scriptable Object
                #m_popUpDataQuitPopUp: PopUpDataScriptableObject

                ===
                <b>Game Events Scriptable Object - UI Manger - Pop Up
                #m_popUpDataGameEventUIMangerSetPopUpData: PopUpDataGameEventScriptableObject
                #m_voidGameEventUIManagerEnablePopUp: VoidGameEventScriptableObject

                ===
                <b>Getters and Setters
                #SetFirstButton(): void

                ===
                <b>UI Menu Base - UI Menu Methods 
                +EnableMenu(): void
                +DisableMenu(): void
                +OpenQuitPopUp(): void
            }
        }

        package PopUp <<Folder>> 
        {
              UIPopUp <|-- UIBase

            class PopUpActions 
            {
                <b>Unity Events
                -m_disablePopUpUnityEvent: UnityEvent

                ===
                <b>Pop Up Action Methods - Quit Game
                +QuitGame(): void
            }

            class UIPopUp
            {
                <b>UI Components
                -m_messageTextBox: TextMeshProUGUI
                -m_yesButtonGameObject: GameObject
                -m_noButtonGameObject: GameObject

                ===
                <b>Controller Inputs
                -m_popUpFirstButton: GameObject

                ===
                <b>Pop Up Data
                m_popUpData: PopUpDataScriptableObject

                ===
                <b>Getters and Setters
                +SetPopUpData(PopUpDataScriptableObject a_popUpData): void

                ===
                <b>Unity Methods
                -Update(): void

                ===
                <b>UI Pop Up Methods
                +EnablePopUp(): void
                +DisablePopUp(): void
                -displayPopUpData(): void
                -cleanUIData(): void

                ===
                <b>On Click Methods 
                +YesActionPopUpOnClick(): void
            }
        }

        package StratScreen <<Folder>> 
        {
            class UIStartScreen 
            {
                <b>Unity Event
                -m_startSoundtrackUnityEvent: UnityEvent
                -m_stopSoundtrackUnityEvent: UnityEvent
                -m_loadNextSceneUnityEvent: UnityEvent

                ===
                <b>Unity Methods
                -Start(): void
                -Update(): void
            }
        }

        package Timer <<Folder>> 
        {
            class UITimer 
            {
                <b>UI Components
                -m_timerText: TextMeshProUGUI
                
                ===
                <b>Time Data Scriptable Object
                -m_timerData: TimerDataScriptableObject

                ===
                <b>Unity Methods
                -Update(): void

                UI Methods
                -displayTime(float a_timeInSeconds): void
            }
        }
    }

    package Utility <<Folder>> 
    {
        class DestroyAfterSeconds 
        {
            <b>Duration Data
            -m_duration: float

            ===
            <b>Unity Methods
            -Start(): void

            ===
            <b>Destroy After Methods
            -destroyAfter(float a_duration): IEnumerator
        }
    }

    package Editor <<Folder>> 
    {
        package DataContainersE 
        {
            class AudioDataEditor 
            {
                <b>Class Variables
                -m_audioPreviewer: AudioSource

                ===
                <b>Custom Editor Methods - Buttons
                -playPreview(AudioSource a_source, AudioDataScriptableObject a_audioData): void
                -stopPreview(AudioSource a_source)

                ===
                <b>Unity Methods
                -OnEnable(): void
                -OnDisable(): void

                ===
                <b>Custom Editor View
                +OnInspectorGUI(): void
            }

            class LevelDataEditor 
            {
                <b>Custom Editor View
                +OnInspectorGUI(): void   
            }
        }

        package GlobalVariablesE 
        {
            class BooleanFlagGlobalVariableEditor 
            {
                <b>Serialized Property
                -m_booleanFlagSerializedProperty: SerializedProperty

                ===
                <b>Unity Methods
                -OnEnable(): void

                ===
                <b>Custom Editor View
                +OnInspectorGUI(): void   
            }
        }

        package IDE 
        {
            class GuildIDEditor 
            {
                <b>Serialized Property
                -m_guilDIDSerializedProperty: SerializedProperty

                ===
                <b>Unity Methods
                -OnEnable(): void

                ===
                <b>Custom Editor View
                +OnInspectorGUI(): void   
            }
        }

        package ListsE 
        {
            class AudioListEditor 
            {
                <b>Serialized Property
                -m_audioDatasSerializedProperty: SerializedProperty

                ===
                <b>Unity Methods
                -OnEnable(): void

                ===
                <b>Custom Editor View
                +OnInspectorGUI(): void  
            }

            class LevelListEditor 
            {
                <b>Serialized Property
                -m_levelDatasSerializedProperty: SerializedProperty

                ===
                <b>Unity Methods
                -OnEnable(): void

                ===
                <b>Custom Editor View
                +OnInspectorGUI(): void 
            }
        }

        package TagE 
        {
            class TagDataEditor
            {
                <b>Custom Editor View
                +OnInspectorGUI(): void 
            }
        }
    }
}

@enduml